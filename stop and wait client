// sliding_window_client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int client_socket;
    struct sockaddr_in server_addr;
    socklen_t addr_size;
    char buffer[MAX_BUFFER_SIZE];

    // Create UDP socket
    client_socket = socket(AF_INET, SOCK_DGRAM, 0);
    if (client_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Server address setup
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    addr_size = sizeof(server_addr);

    // Sending frames based on user input
    int frame_count;
    printf("Enter the number of frames to send: ");
    scanf("%d", &frame_count);  // User inputs how many frames to send

    getchar(); // to consume the newline character after the frame count

    for (int i = 1; i <= frame_count; i++) {
        printf("Enter data for Frame %d: ", i);
        fgets(buffer, MAX_BUFFER_SIZE, stdin);  // User inputs data for each frame
        buffer[strcspn(buffer, "\n")] = '\0';  // Remove newline character

        // Send the frame to the server
        sendto(client_socket, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, addr_size);
        printf("Sent: %s\n", buffer);
        
        // Wait for acknowledgment from the server
        int n = recvfrom(client_socket, buffer, MAX_BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, &addr_size);
        buffer[n] = '\0';  // Null terminate the received data
        printf("Received ACK: %s\n", buffer);

        sleep(1);  // Simulate wait time before sending the next frame
    }

    close(client_socket);
    return 0;
}
